// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  isInvited     Boolean   @default(false)
  invitedBy     String?
  invitedAt     DateTime?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  invites  Invite[] @relation("InvitedBy")
  sites    Site[]   @relation("SiteUsers")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Invite System
model Invite {
  id        String   @id @default(cuid())
  email     String
  role      UserRole @default(USER)
  token     String   @unique
  invitedBy String
  invitedAt DateTime @default(now())
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  usedAt    DateTime?

  inviter User @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@map("invites")
}

// Site Management
model Site {
  id          String   @id @default(uuid())
  name        String
  description String?
  domain      String?
  logo        String?  // URL to the site logo
  coverImage  String?  // URL to the site cover image
  users       User[]   @relation("SiteUsers")
  pages     Page[]
  blogPosts BlogPost[]
  mediaFiles MediaFile[]
  features  SiteFeature[]
  sponsors  Sponsor[]
  contactForm ContactForm?
  contactSubmissions ContactSubmission[]
  socialMediaChannels SocialMediaChannel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sites")
}

model Page {
  id          String   @id @default(uuid())
  title       String
  slug        String
  content     String?
  isPublished Boolean  @default(false)
  siteId      String
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([siteId, slug])
  @@map("pages")
}

model BlogPost {
  id          String   @id @default(uuid())
  title       String
  slug        String
  content     String?
  excerpt     String?
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  siteId      String
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([siteId, slug])
  @@map("blog_posts")
}

model MediaFile {
  id        String   @id @default(uuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  folderPath String? // Nested folder path (e.g., "images/gallery", "documents/pdfs")
  description String? // Optional description for the file
  siteId    String
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("media_files")
}

model SiteFeature {
  id          String      @id @default(uuid())
  siteId      String
  site        Site        @relation(fields: [siteId], references: [id], onDelete: Cascade)
  feature     FeatureType
  displayName String      // Human-readable name for the feature
  description String?     // Optional description of the feature
  isEnabled   Boolean     @default(true)
  config      Json?       // Flexible configuration for feature-specific settings
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([siteId, feature])
  @@map("site_features")
}

model Sponsor {
  id        String   @id @default(uuid())
  name      String
  url       String?
  logo      String?  // URL to the sponsor logo
  active    Boolean  @default(true)
  siteId    String
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sponsors")
}

// Contact Management
model ContactForm {
  id          String             @id @default(uuid())
  name        String             @default("Contact Form")
  description String?
  isActive    Boolean            @default(true)
  siteId      String             @unique // One contact form per site for now
  site        Site               @relation(fields: [siteId], references: [id], onDelete: Cascade)
  fields      ContactFormField[]
  submissions ContactSubmission[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("contact_forms")
}

model ContactFormField {
  id            String                  @id @default(uuid())
  contactFormId String
  contactForm   ContactForm             @relation(fields: [contactFormId], references: [id], onDelete: Cascade)
  fieldName     String                  // e.g., "firstName", "email", "message"
  fieldLabel    String                  // e.g., "First Name", "Email Address"
  fieldType     ContactFormFieldType    @default(TEXT)
  isRequired    Boolean                 @default(false)
  placeholder   String?
  helpText      String?
  options       String?                 // JSON string for select/checkbox options
  sortOrder     Int                     @default(0)
  isActive      Boolean                 @default(true)
  submissionData ContactSubmissionData[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@unique([contactFormId, fieldName])
  @@map("contact_form_fields")
}

model ContactSubmission {
  id            String                  @id @default(uuid())
  contactFormId String
  contactForm   ContactForm             @relation(fields: [contactFormId], references: [id], onDelete: Cascade)
  siteId        String
  site          Site                    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  submitterIp   String?
  submitterUserAgent String?
  isRead        Boolean                 @default(false)
  isArchived    Boolean                 @default(false)
  submissionData ContactSubmissionData[]
  submittedAt   DateTime                @default(now())

  @@map("contact_submissions")
}

model ContactSubmissionData {
  id                  String             @id @default(uuid())
  contactSubmissionId String
  contactSubmission   ContactSubmission  @relation(fields: [contactSubmissionId], references: [id], onDelete: Cascade)
  contactFormFieldId  String
  contactFormField    ContactFormField   @relation(fields: [contactFormFieldId], references: [id], onDelete: Cascade)
  value               String?
  createdAt           DateTime           @default(now())

  @@unique([contactSubmissionId, contactFormFieldId])
  @@map("contact_submission_data")
}

// Social Media Integration
model SocialMediaChannel {
  id            String                    @id @default(uuid())
  siteId        String
  site          Site                      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  platform      SocialMediaPlatform
  channelId     String                    // Platform-specific channel ID (YouTube channel ID, Twitch username, etc.)
  channelName   String?                   // Display name for the channel
  channelUrl    String?                   // Full URL to the channel
  isActive      Boolean                   @default(true)
  displayOrder  Int                       @default(0)
  config        Json?                     // Platform-specific configuration
  stats         SocialMediaChannelStat[]
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt

  @@unique([siteId, platform, channelId])
  @@map("social_media_channels")
}

model SocialMediaChannelStat {
  id                    String              @id @default(uuid())
  socialMediaChannelId  String
  socialMediaChannel    SocialMediaChannel  @relation(fields: [socialMediaChannelId], references: [id], onDelete: Cascade)
  statType              SocialMediaStatType
  displayName           String              // Human-readable name for the stat
  isEnabled             Boolean             @default(true)
  displayOrder          Int                 @default(0)
  value                 String?             // Latest cached value
  lastUpdated           DateTime?           // When this stat was last fetched
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@unique([socialMediaChannelId, statType])
  @@map("social_media_channel_stats")
}

// Schedule Clean Dallas Application Tables
// These tables are from another application sharing the same database
model ScdQuoteRequest {
  id                   String                 @id // Custom ID generation
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  fullName             String
  email                String
  phone                String?
  address              String?
  cleaningType         ScdCleaningType
  scheduledDate        DateTime?
  squareFootage        Int?
  rooms                Int?
  bathrooms            Int?
  notes                String?
  status               ScdQuoteRequestStatus  @default(PENDING)
  contacted            Boolean                @default(false)
  completed            Boolean                @default(false)
  confirmationNumber   String?                @unique
  quoteSent            Boolean                @default(false)
  quoteAmount          Float?
  quoteSentAt          DateTime?

  @@map("scd_quote_requests")
  @@index([status])
  @@index([createdAt])
  @@index([email])
  @@index([confirmationNumber])
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum FeatureType {
  PAGES
  BLOG_POSTS
  MEDIA_FILES
  EMAIL_MANAGEMENT
  CONTACT_MANAGEMENT
  SPONSORS
  ONLINE_STORE
  NEWSLETTER
  ANALYTICS
  SEO_TOOLS
  SOCIAL_MEDIA_INTEGRATION
  MULTI_LANGUAGE
  CUSTOM_FORMS
  MEMBER_AREA
  EVENT_MANAGEMENT
}

enum ContactFormFieldType {
  TEXT
  EMAIL
  PHONE
  TEXTAREA
  SELECT
  CHECKBOX
  RADIO
  NUMBER
  URL
}

enum SocialMediaPlatform {
  YOUTUBE
  TWITCH
  INSTAGRAM
  TWITTER
  TIKTOK
  FACEBOOK
}

enum SocialMediaStatType {
  // YouTube Stats
  YOUTUBE_SUBSCRIBERS
  YOUTUBE_TOTAL_VIEWS
  YOUTUBE_VIDEO_COUNT
  YOUTUBE_THUMBNAIL
  YOUTUBE_DESCRIPTION
  YOUTUBE_AVERAGE_VIEWS
  YOUTUBE_RECENT_VIDEOS

  // Twitch Stats  
  TWITCH_FOLLOWERS
  TWITCH_TOTAL_VIEWS
  TWITCH_RECENT_STREAMS
  TWITCH_AVERAGE_VIEWERS
  TWITCH_SUBSCRIBER_COUNT

  // Common Stats
  PLATFORM_URL
  CHANNEL_NAME
  LAST_UPDATED
}

// Schedule Clean Dallas Enums
enum ScdCleaningType {
  AIRBNB
  AFTER_PARTY
  OFFICE
  REALTOR
  OTHER
}

enum ScdQuoteRequestStatus {
  PENDING
  CONTACTED
  SCHEDULED
  COMPLETED
  CANCELED
}
