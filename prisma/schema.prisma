// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  isInvited     Boolean   @default(false)
  invitedBy     String?
  invitedAt     DateTime?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  invites  Invite[] @relation("InvitedBy")
  sites    Site[]   @relation("SiteUsers")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Invite System
model Invite {
  id        String   @id @default(cuid())
  email     String
  role      UserRole @default(USER)
  token     String   @unique
  invitedBy String
  invitedAt DateTime @default(now())
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  usedAt    DateTime?

  inviter User @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@map("invites")
}

// Site Management
model Site {
  id        String   @id @default(uuid())
  name      String
  domain    String?
  users     User[]   @relation("SiteUsers")
  pages     Page[]
  blogPosts BlogPost[]
  mediaFiles MediaFile[]
  features  SiteFeature[]
  sponsors  Sponsor[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sites")
}

model Page {
  id          String   @id @default(uuid())
  title       String
  slug        String
  content     String?
  isPublished Boolean  @default(false)
  siteId      String
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([siteId, slug])
  @@map("pages")
}

model BlogPost {
  id          String   @id @default(uuid())
  title       String
  slug        String
  content     String?
  excerpt     String?
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  siteId      String
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([siteId, slug])
  @@map("blog_posts")
}

model MediaFile {
  id        String   @id @default(uuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  siteId    String
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("media_files")
}

model SiteFeature {
  id        String      @id @default(uuid())
  siteId    String
  site      Site        @relation(fields: [siteId], references: [id], onDelete: Cascade)
  feature   FeatureType
  isEnabled Boolean     @default(true)
  config    Json?       // Flexible configuration for feature-specific settings
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([siteId, feature])
  @@map("site_features")
}

model Sponsor {
  id        String   @id @default(uuid())
  name      String
  url       String?
  logo      String?  // URL to the sponsor logo
  active    Boolean  @default(true)
  siteId    String
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sponsors")
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum FeatureType {
  PAGES
  BLOG_POSTS
  MEDIA_FILES
  EMAIL_MANAGEMENT
  CONTACT_MANAGEMENT
  SPONSORS
  ONLINE_STORE
  NEWSLETTER
  ANALYTICS
  SEO_TOOLS
  SOCIAL_MEDIA_INTEGRATION
  MULTI_LANGUAGE
  CUSTOM_FORMS
  MEMBER_AREA
  EVENT_MANAGEMENT
}
